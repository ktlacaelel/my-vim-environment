# try
snippet try
	try {
		${1}
	} catch (error) {
		${2}
	}
# forEach
snippet forEach 
	forEach(function (${1:item}) {
		$1.${2:}
	});
snippet console
	console.log(${1});${2}
snippet dispatch
	dispatch('${1:event}');${2}
# logger.log
snippet logger
	logger.log(${1});${2}
# require
snippet require('${1:file}');
	${2}
# Neon Class
snippet Class
	Class('${1:`Camelize(Filename())`}')({

		prototype : {

			${2}

		}

	});
# Prototype
snippet proto
	${1:class_name}.prototype.${2:method_name} =
	function(${3:first_argument}) {
		${4:// body...}
	};
# Function
snippet fun
	function ${1:function_name} (${2:argument}) {
		${3:// body...}
	}
# Anonymous Function
snippet f
	function ${1:name}(${2:argument}) {
		${3:code}
	}
snippet cap
	${1:source}(function ${2:methodName}(${3:argument}) {
		${4:code}
	});
snippet method
	/**
	 * ${1:what it does in one line.}
	 */
	${2:methodName} : function $2(${3:arguments}) {
	}${4}
# if
snippet if
	if (${1:true}) {
		${2}
	}
# else
snippet else
	else {
		${1: else what?}
	}
# if ... else
snippet ife
	if (${1:true}) {${2}}
	else{${3}};
# tertiary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# switch
snippet switch
	switch(${1:expression}) {
		case '${3:case}':
			${4:// code}
			break;
		${5}
		default:
			${2:// code}
	}
# case
snippet case
	case '${1:case}':
		${2:// code}
		break;
	${3}
# for (...) {...}
snippet for
	for (var ${2:needle} = 0; $2 < ${1:collection}.length; $2${3:++}) {
		${4:$1[$2]}
	}
# for (...) {...} (Improved Native For-Loop)
snippet forr
	for (var ${2:needle} = ${1:collection}.length - 1; $2 >= 0; $2${3:--}) {
		${4:$1[$2]}
	}
# while (...) {...}
snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}
# do...while
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */})
# Object Method
snippet :f
	${1:method_name}: function(${2:attribute}) {
		${4}
	}${3:,}
# setTimeout function
snippet timeout
	setTimeout(function() {${3}}${2}, ${1:10};
# Get Elements
snippet get
	getElementsBy${1:TagName}('${2}')${3}
# Get Element
snippet gett
	getElementBy${1:Id}('${2}')${3}
